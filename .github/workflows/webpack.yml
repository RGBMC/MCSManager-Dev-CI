name: Build MCSManager

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Read version from panel/package.json
        id: get_version
        run: |
          VERSION=$(jq -r .version panel/package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get short commit hash
        id: get_hash
        run: |
          HASH=$(git rev-parse --short HEAD)
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          chmod a+x ./install-dependents.sh
          chmod a+x ./build.sh
          ./install-dependents.sh
          ./build.sh

      - name: Add binaries to production files
        run: wget --input-file=lib-urls.txt --directory-prefix=production-code/daemon/lib/

      - name: Create linux and windows build
        run: |
          cp -r production-code dist_linux
          mv production-code dist_windows

      - name: Copy startup scripts
        run: |
          cp prod-scripts/linux/* dist_linux/
          cp prod-scripts/windows/* dist_windows/

      - name: Copy node runtime to windows build
        run: |
          wget https://nodejs.org/download/release/latest-v20.x/win-x64/node.exe -O dist_windows/daemon/node_app.exe
          cp dist_windows/daemon/node_app.exe dist_windows/web/node_app.exe

      - name: Create archive
        run: |
          mv dist_linux/ mcsmanager/
          tar czf mcsmanager_linux_release.tar.gz mcsmanager/
          rm -rf mcsmanager/
          mv dist_windows/ mcsmanager/
          zip -r mcsmanager_windows_release.zip mcsmanager/

      - name: Upload linux distribution to release
        uses: actions/upload-artifact@v4
        with:
          name: Linux Distribution
          path: mcsmanager_linux_release.tar.gz

      - name: Upload windows distribution to release
        uses: actions/upload-artifact@v4
        with:
          name: Windows Distribution
          path: mcsmanager_windows_release.zip

      - name: Create Pre-release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ steps.get_version.outputs.version }}-${{ steps.get_hash.outputs.hash }}"
          name: "Build ${{ steps.get_version.outputs.version }}-${{ steps.get_hash.outputs.hash }}"
          prerelease: true
          files: |
            mcsmanager_linux_release.tar.gz
            mcsmanager_windows_release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Cleaup releases (keep latest 10)
        run: |
          gh release list --limit 100 | awk '{print $1}' | tail -n +11 | while read tag; do
            echo "Cleaning up release: $tag"
            gh release delete "$tag" --yes
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
